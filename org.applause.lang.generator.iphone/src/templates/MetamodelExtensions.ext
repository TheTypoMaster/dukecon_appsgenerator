import org::eclipse::emf::ecore;
import org::applause::lang::applauseDsl;

org::eclipse::emf::ecore::EObject eRootContainer(org::eclipse::emf::ecore::EObject this):
	JAVA templates.Extensions.getRootContainer(org.eclipse.emf.ecore.EObject);

List[org::applause::lang::applauseDsl::ViewCall] allViewCalls(org::eclipse::emf::ecore::EObject this):
	JAVA templates.Extensions.allViewCalls(org.eclipse.emf.ecore.EObject);	

model(org::eclipse::emf::ecore::EObject this):
	(ApplauseModel)this.eRootContainer();

application(org::eclipse::emf::ecore::EObject this):
	model().application; 

providersWithImplementation(Application this):
	model().elements.typeSelect(ContentProvider);
	
entities(Application this):
	model().elements.typeSelect(Entity);

listViews(Application this):
	model().elements.typeSelect(TableView);

detailViews(Application this):
	model().elements.typeSelect(DetailsView);

sectionedViews(Application this):
	model().elements.typeSelect(SectionedView);
	
type(SectionedView this):
	this.content.description.type.name;
	
List[ObjectReference] referencesIn(ScalarExpression this):
	JAVA org.applause.lang.scoping.TypeUtil.getReferencesIn(org.applause.lang.applauseDsl.ScalarExpression);
	
resolversReference(ContentProvider this):
	url.referencesIn().selectFirst(e|!Constant.isInstance(e.object));
	
contentProvider(ProviderConstruction this):
	SimpleProviderConstruction.isInstance(this)
		? ((SimpleProviderConstruction)this).resolver()
		: ((ComplexProviderConstruction)this).provider;
		
ContentProvider resolver(SimpleProviderConstruction this):
	JAVA org.applause.lang.validation.ApplauseDslJavaValidator.findResolver(org.applause.lang.applauseDsl.SimpleProviderConstruction);				

TypeDescription typeDescription(VariableDeclaration this):
	JAVA org.applause.lang.scoping.TypeUtil.getTypeOf(org.applause.lang.applauseDsl.VariableDeclaration);
	
hasParameter(ProviderConstruction this):
	false;

hasParameter(ComplexProviderConstruction this):
	this.provider.parameter != null;
	
hasParameter(SimpleProviderConstruction this):
	false;
	
private List[ObjectReference] toList(Void this):
	{};

List[ObjectReference] toList(ObjectReference this):
	{object.name}.addAll(tail.toList());
	
String value(ScalarExpression this):
	"**SHOULD NEVER REACH HERE!**";
	
String value(StringLiteral this):
	this.value;

String name(Button this):
	fullname().replaceFirst(".png", "");
	
String fullname(Button this):
	title != null ? title.value() : icon.value();
		
	
	