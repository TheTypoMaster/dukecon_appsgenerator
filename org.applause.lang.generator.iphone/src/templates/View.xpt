«IMPORT org::applause::lang::applauseDsl»

«EXTENSION templates::Extensions»
«EXTENSION templates::MetamodelExtensions»

«DEFINE main FOR Application-»
«EXPAND view FOREACH model().elements.typeSelect(org::applause::lang::applauseDsl::View)»
«ENDDEFINE»

«DEFINE view FOR View»
«EXPAND viewHeader»
«EXPAND viewModule»
«ENDDEFINE»

«DEFINE viewHeader FOR View»
«FILE filenameHeader()»
#import <UIKit/UIKit.h>
«IF !WebView.isInstance(this)»
#import "«baseClassFilenameHeader()»"
#import "IPContentProvider.h"
#import "CXMLElement.h"
«ENDIF»

@interface «className()» : «baseClassName()» {

}

@end
«ENDFILE»
«ENDDEFINE»

«DEFINE viewModule FOR View»
«FILE filenameModule()»
#import "«filenameHeader()»"
«IF SectionedView.isInstance(this)»
#import "NSObject+iPhonical.h"
«ENDIF»
«EXPAND imports» 

@implementation «className()»
«IF WebView.isInstance(this)»
{
    UIWebView *webView;
}
«ENDIF»
«IF SectionedView.isInstance(this)»

	«EXPAND sectionCount FOR (SectionedView) this»
	«EXPAND sectionTitleHeader FOR (SectionedView) this»
	«EXPAND rowCounts FOR (SectionedView) this»
	«EXPAND rowHeights FOR (SectionedView) this -»
	«EXPAND cellDescriptions»
	«EXPAND cellSelections»
	«EXPAND staticData»
«ELSEIF WebView.isInstance(this) »
- (void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = @"«application().name»";
    UIBarButtonItem *backButton = [[UIBarButtonItem alloc] initWithImage:[UIImage imageNamed:@"«buttons.first().name()»"]          
        style:UIBarButtonItemStylePlain
        target:self action:@selector(«buttons.first().handler»)];
    self.navigationItem.leftBarButtonItem= backButton;
    
    
    webView = [[UIWebView alloc] initWithFrame:[self.view frame]];
    [self.view addSubview:webView];
    NSURL *url = [NSURL URLWithString:@"«getUrl((WebView)this)»"];
    NSURLRequest *request = [NSURLRequest requestWithURL:url];
    [webView setScalesPageToFit:YES];
    [webView loadRequest:request];
}

«ENDIF»

«EXPAND buttonHandler FOREACH buttons»


@end
«ENDFILE»
«ENDDEFINE»

«DEFINE buttonHandler FOR Button»
- (void)«handler»
{
    NSLog(@"yeah");
}
«ENDDEFINE»»

«DEFINE imports FOR View-»
«FOREACH neededImports() AS i»#import "«i»" 
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE sectionCount FOR SectionedView»«IF sections.size != 1»
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
	if(!contentProvider || !contentProvider.content || contentProvider.loading)
		return 0;
	else
    	return «sections()»;
}
«ENDIF»«ENDDEFINE»

«DEFINE sectionTitleHeader FOR SectionedView»«IF sections() > 0»
- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section {
    NSArray *catNodes = [[contentProvider safeValueForKeyPath:@"document"] nodesForXPath:[NSString stringWithFormat:@"«selection(forAllSections().provider)»",«parameter(forAllSections().provider)»] error:nil];
    NSString *title = [catNodes[0] attributeForName:@"id"].stringValue;
    return title;
}
«ENDIF»«ENDDEFINE»

«DEFINE rowCounts FOR SectionedView»
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
	«IF sections() > 0»
		NSArray *catNodes = [[contentProvider safeValueForKeyPath:@"document"] nodesForXPath:[NSString stringWithFormat:@"«selection(forAllSections().provider)»/candy",«parameter(forAllSections().provider)»] error:nil];
    	NSInteger childs = [catNodes count];
    	return childs;
   	«ELSE»
   		return nil;
    «ENDIF»
}
«ENDDEFINE»

«DEFINE rowHeights FOR SectionedView»«IF this.anySpecificRowHeight()»
-(CGFloat) tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
«FOREACH sections AS s ITERATOR is-»
«FOREACH s.cells AS c ITERATOR ic-»
«IF c.specificRowHeight()>0-»
	if(indexPath.section == «is.counter0» && indexPath.row == «ic.counter0»)
		return «c.specificRowHeight()»;
«ENDIF-»
«ENDFOREACH»
«ENDFOREACH»
	return self.tableView.rowHeight;
}
«ENDIF»«ENDDEFINE»

«DEFINE cellDescriptions FOR View»«ENDDEFINE»

«DEFINE cellConstraint(Integer section, Integer row) FOR SectionCell-»
«IF iterator==null»indexPath.section == «section» && indexPath.row == «row-»
«ELSE»indexPath.section == «section»«ENDIF-»
«ENDDEFINE»

«DEFINE cellDescriptions FOR SectionedView»
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
«FOREACH sections AS s ITERATOR si»
«FOREACH s.cells AS c ITERATOR ci»
	if(«EXPAND cellConstraint(si.counter0, ci.counter0) FOR c») {
	«EXPAND cellContent FOR c»
	} else
«ENDFOREACH-»
«ENDFOREACH-»
		return nil;
}
«ENDDEFINE»

«DEFINE cellContent FOR SectionCell-»
	«IF iterator!=null»id item = [[«iterator.collection.expression('contentProvider', 'content')» asArray] objectAtIndex: indexPath.row];
	«EXPAND cellContent('item', '')»«ELSE»
	«EXPAND cellContent('contentProvider', 'content')»
	«ENDIF»
«ENDDEFINE»

«DEFINE cellContent(String kvcTarget, String kvcPrefix) FOR SectionCell»
    «tableCellClassname()» *cell = [self cell«type()»ForTableView:tableView];
	«IF text!=null»cell.textLabel.text = «text.expression(kvcTarget, kvcPrefix)»;«ENDIF»
	«IF details!=null»cell.detailTextLabel.text = «details.expression(kvcTarget, kvcPrefix)»;«ENDIF»
	«IF query!=null»cell.queryString = «query.expression(kvcTarget, kvcPrefix)»;«ENDIF»
	«IF image!=null || queryImage("cell")!=null-»
	«IF image!=null»NSString *imageURL = «image.expression(kvcTarget, kvcPrefix)»;«ELSE-»
	NSString *imageURL = «queryImage("cell")»;«ENDIF»
	cell.imageView.image = [self getImage: imageURL withLoadingImage:@"personLoading.png" andErrorImage:@"personUnknown.png"];
	«ENDIF-»
	return cell;
«ENDDEFINE»

«DEFINE cellSelections FOR View»«ENDDEFINE»

«DEFINE cellAction FOR SectionCell»
	«IF iterator!=null»id item = [[«iterator.collection.expression('contentProvider', 'content')»asArray] objectAtIndex: indexPath.row];
	«EXPAND cellAction('item', '') FOR action»«ELSE»
	«EXPAND cellAction('contentProvider', 'content') FOR action»
	«ENDIF»
«ENDDEFINE»


«DEFINE cellSelections FOR SectionedView»
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {

}
«ENDDEFINE»

«DEFINE cellAction(String kvcTarget, String kvcPrefix) FOR ViewAction»«this.metaType»«ENDDEFINE»

«DEFINE cellAction(String kvcTarget, String kvcPrefix) FOR ViewCall-»
		IPContentProvider *provider = «provider.contentProvider('(' + application().centralProvidersClassName() + '*)contentProvider.providers', kvcTarget, kvcPrefix)»;
		«view.className()» *controller = [[«view.className()» alloc] init];
		controller.contentProvider = provider;
		[self.navigationController pushViewController: controller animated: TRUE];
		[controller release];
«ENDDEFINE»

«DEFINE cellAction(String kvcTarget, String kvcPrefix) FOR ExternalOpen-»
		NSString *urlString = «url.expression(kvcTarget, kvcPrefix)»;
		[[UIApplication sharedApplication] openURL:[NSURL URLWithString:urlString]];
«ENDDEFINE»

«DEFINE staticData FOR View-»
-(void)updateData {
	«IF title!=null»self.navigationItem.title = «title.expression('contentProvider', 'content')»;«ENDIF»
	«EXPAND staticData2»
	[super updateData];
}
«ENDDEFINE»

«DEFINE staticData2 FOR View»«ENDDEFINE»
«DEFINE staticData2 FOR DetailsView»
	if(contentProvider && contentProvider.content && !contentProvider.loading) {
		«IF header!=null && header.title!=null»self.headerView.titleLabel.text = «header.title.expression('contentProvider', 'content')»;«ENDIF»
		«IF header!=null && header.subtitle!=null»self.headerView.subtitleLabel.text = «header.subtitle.expression('contentProvider', 'content')»;«ENDIF»
		«IF header!=null && header.details!=null»self.headerView.detailsLabel.text = «header.details.expression('contentProvider', 'content')»;«ENDIF»
		«IF header!=null && header.image!=null»NSString *imageURL = «header.image.expression('contentProvider', 'content')»;
		self.headerView.image.image = [self getImage: imageURL withLoadingImage:@"personLoading.png" andErrorImage:@"personUnknown.png"];«ENDIF»
	}	
«ENDDEFINE»